Inductive Nat : Type :=
  | O
  | S (n : Nat).

Fixpoint soma (n m : Nat) : Nat :=
  match m with
  | O    => n
  | S m' => S(soma n m')
  end.

Fixpoint mult (n m : Nat) : Nat :=
  match m with
  | O    => O
  | S m' => soma n (mult n m')
  end.

Fixpoint exp (n m : Nat) : Nat :=
  match m with
  | O    => S O
  | S m' => mult n (exp n m')
  end.

Notation "x + y" := (soma x y)
                    (at level 50, left associativity).

Notation "x * y" := (mult x y)
                    (at level 40, left associativity).

Notation "x ^ y" := (exp x y)
                    (at level 30, right associativity).

(** Associatividade da multiplicação **)


Theorem associatividade_multiplicacao : forall (n m k : Nat), (n * m) * k = n * (m * k).
Proof.
  intros n m k. induction k as [| k' HI].
  - simpl. reflexivity.
  - simpl. rewrite -> HI. 
Abort.


(** Comutatividade da multiplicação **)

Lemma mult_n_O : forall (n : Nat), O = O * n.
Proof.
  induction n as [| n' HI].
  - simpl. reflexivity.
  - simpl. rewrite <- HI. simpl. reflexivity.
Qed.

Lemma mult_n_Sm : forall (n m : Nat), n * (S m) = (S m) * n. Admitted.

Theorem comutatividade_multiplicacao : forall (n m : Nat), n * m = m * n.
Proof.
  intros n m.
  induction n as [| n' HIn'].
  - simpl. rewrite <- (mult_n_O m). reflexivity.
  - induction m as [| m' HIm'].
    + rewrite <- (mult_n_O (S n')). simpl. reflexivity.
    + simpl. rewrite <- HIn'. simpl. reflexivity.
Qed.